{
  message: { method: 'GET', url: '/ws', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:30:41.023Z'
}
{
  message: { method: 'GET', url: '/ws', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:30:58.011Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:31:05.966Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:31:24.095Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:31:24.366Z'
}
{
  message: { method: 'GET', url: '/ws', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:31:31.020Z'
}
{
  message: {
    method: 'POST',
    url: '/api/newsposts',
    body: { title: 'test', text: 'hello world' }
  },
  level: 'info',
  timestamp: '2024-04-08T17:31:35.357Z'
}
{
  message: 'The "data" argument must be of type string or an instance of Buffer, TypedArray, or DataView. Received undefined',
  stack: 'TypeError: The "data" argument must be of type string or an instance of Buffer, TypedArray, or DataView. Received undefined\n' +
    '    at Hash.update (node:internal/crypto/hash:104:11)\n' +
    '    at AuthRepository.hash (/home/teach/hw15/server/services/auth.service.ts:20:40)\n' +
    '    at AuthRepository.<anonymous> (/home/teach/hw15/server/services/auth.service.ts:41:23)\n' +
    '    at step (/home/teach/hw15/server/services/auth.service.ts:33:23)\n' +
    '    at Object.next (/home/teach/hw15/server/services/auth.service.ts:14:53)\n' +
    '    at /home/teach/hw15/server/services/auth.service.ts:8:71\n' +
    '    at new Promise (<anonymous>)\n' +
    '    at __awaiter (/home/teach/hw15/server/services/auth.service.ts:4:12)\n' +
    '    at Strategy.AuthRepository.auth [as _verify] (/home/teach/hw15/server/services/auth.service.ts:33:63)\n' +
    '    at Strategy.authenticate (/home/teach/hw15/server/node_modules/passport-http-bearer/lib/strategy.js:132:10)',
  level: 'error',
  timestamp: '2024-04-08T17:31:35.370Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:31:35.373Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:31:35.665Z'
}
{
  message: {
    method: 'POST',
    url: '/api/auth/register',
    body: {
      email: 'test@localhost.com',
      password: '22222222',
      confirmPassword: '22222222'
    }
  },
  level: 'info',
  timestamp: '2024-04-08T17:31:57.980Z'
}
{
  message: {
    method: 'POST',
    url: '/api/auth/register',
    body: { email: '', password: '', confirmPassword: '' }
  },
  level: 'info',
  timestamp: '2024-04-08T17:31:59.589Z'
}
{
  message: 'Validation error',
  stack: 'ValidatorError: Validation error\n' +
    '    at new ValidationError (/home/teach/hw15/server/errors/ValidationError.ts:4:10)\n' +
    '    at /home/teach/hw15/server/server.ts:41:13\n' +
    '    at Layer.handle [as handle_request] (/home/teach/hw15/server/node_modules/express/lib/router/layer.js:95:5)\n' +
    '    at next (/home/teach/hw15/server/node_modules/express/lib/router/route.js:149:13)\n' +
    '    at Route.dispatch (/home/teach/hw15/server/node_modules/express/lib/router/route.js:119:3)\n' +
    '    at Layer.handle [as handle_request] (/home/teach/hw15/server/node_modules/express/lib/router/layer.js:95:5)\n' +
    '    at /home/teach/hw15/server/node_modules/express/lib/router/index.js:284:15\n' +
    '    at Function.process_params (/home/teach/hw15/server/node_modules/express/lib/router/index.js:346:12)\n' +
    '    at next (/home/teach/hw15/server/node_modules/express/lib/router/index.js:280:10)\n' +
    '    at serveStatic (/home/teach/hw15/server/node_modules/serve-static/index.js:75:16)',
  level: 'error',
  timestamp: '2024-04-08T17:31:59.600Z'
}
{
  message: {
    method: 'POST',
    url: '/api/login',
    body: { email: 'test@localhost.com', password: '22222222' }
  },
  level: 'info',
  timestamp: '2024-04-08T17:32:05.646Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:32:15.580Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:32:15.686Z'
}
{
  message: {
    method: 'POST',
    url: '/api/newsposts',
    body: { title: 'test', text: 'hello world' }
  },
  level: 'info',
  timestamp: '2024-04-08T17:32:25.751Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:32:25.764Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:32:26.060Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:32:27.683Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:32:27.790Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:32:31.033Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:32:31.147Z'
}
{
  message: { method: 'GET', url: '/ws', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:32:36.023Z'
}
{
  message: {
    method: 'POST',
    url: '/api/newsposts',
    body: { title: 'ddwdw', text: 'ddwdw' }
  },
  level: 'info',
  timestamp: '2024-04-08T17:32:41.974Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:32:41.992Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:32:42.253Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:34:38.043Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:34:38.378Z'
}
{
  message: {
    method: 'POST',
    url: '/api/newsposts',
    body: { title: '1', text: '1' }
  },
  level: 'info',
  timestamp: '2024-04-08T17:34:42.447Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:34:42.461Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:34:42.590Z'
}
{
  message: { method: 'GET', url: '/ws', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:34:45.021Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:37:33.203Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:37:33.366Z'
}
{
  message: {
    method: 'POST',
    url: '/api/newsposts',
    body: { title: 'test', text: 'hello world' }
  },
  level: 'info',
  timestamp: '2024-04-08T17:37:41.577Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:37:41.593Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:37:41.867Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:37:47.238Z'
}
{
  message: { method: 'GET', url: '/api/newsposts?page=0&size=12', body: {} },
  level: 'info',
  timestamp: '2024-04-08T17:37:47.348Z'
}
